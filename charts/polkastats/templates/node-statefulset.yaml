# https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/
# https://cloud.google.com/kubernetes-engine/docs/concepts/statefulset
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.app }}-node
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.GitlabEnvSlug | default .Values.app }}-node
  serviceName: {{ .Values.app }}-node
  replicas: {{ .Values.nodes.replicas }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: {{ .Values.GitlabEnvSlug | default .Values.app }}-node
    spec:
      {{- if .Values.rbac.enable }}
      serviceAccountName: {{ .Values.rbac.name }}
      {{- else }}
      serviceAccountName: default
      {{- end }}
      {{- if .Values.node_selector }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
                - key: node
                  operator: In
                  values:
                  - {{ .Values.node_selector }}
        {{- end }}
        {{- if .Values.listen_node_port }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ .Values.app }}
              topologyKey: "kubernetes.io/hostname"
        {{- end }}
      terminationGracePeriodSeconds: 300
      {{- if .Values.validator.keys }}
      volumes:
        - name: {{ .Values.app }}-validator-secrets
          secret:
            secretName: {{ .Values.app }}-secrets
      initContainers:
      - name: prepare-secrets
        image: busybox
        command: [ "/bin/sh" ]
        args:
          - -c
          - sed -n -r "s/^${POD_NAME}-key ([^ ]+)$/\1/p" /etc/validator/secrets > {{ .Values.node.image.basepath }}/key;
            sed -n -r "s/^${POD_NAME}-node-key ([^ ]+)$/\1/p" /etc/validator/secrets > {{ .Values.node.image.basepath }}/node-key;
            sed -n -r "s/^${POD_NAME}-name ([^ ]+)$/\1/p" /etc/validator/secrets > {{ .Values.node.image.basepath }}/name;
            test -s {{ .Values.node.image.basepath }}/name || echo "${POD_NAME}" > {{ .Values.node.image.basepath }}/name
        env:
          # from (workaround for hostname)
          # https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        - name: {{ .Values.app }}-validator-secrets
          readOnly: true
          mountPath: "/etc/validator"
        - name: {{ .Values.app }}dir
          mountPath: {{ .Values.node.image.basepath }}
      {{- end }}
      containers:
      - name: {{ .Values.app }}
        imagePullPolicy: "{{ .Values.node.image.pullPolicy }}"
        image: "{{ .Values.node.image.repository }}:{{ .Values.node.image.tag }}"
        {{- if .Values.resources }}
        resources:
          requests:
            memory: {{ .Values.resources.memory }}
            cpu: {{ .Values.resources.cpu }}
        {{- end }}
        ports:
        - containerPort: 30333
          name: p2p
        - containerPort: 9933
          name: http-rpc
        - containerPort: 9944
          name: websocket-rpc
        command: ["/bin/sh"]
        args:
          - -c
          - exec /usr/local/bin/substrate
            --base-path {{ .Values.node.image.basepath }}
            {{- if .Values.validator.keys }}
            --validator
            --name $(cat {{ .Values.node.image.basepath }}/name)
            --key $(cat {{ .Values.node.image.basepath }}/key)
            --node-key $(cat {{ .Values.node.image.basepath }}/node-key)
            {{- else }}
            --name $(POD_NAME)
            {{- end }}
            {{- range .Values.nodes.args }} {{ . }} {{- end }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        resources:
          requests:
            cpu: {{ .Values.node.requests.cpu }}
            memory: {{ .Values.node.requests.memory }}
          limits:
            cpu: {{ .Values.node.limits.cpu }}
            memory: {{ .Values.node.limits.memory }}
        volumeMounts:
        - name: {{ .Values.app }}dir
          mountPath: {{ .Values.node.image.basepath }}
        readinessProbe:
          httpGet:
            path: /health
            port: http-rpc
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: http-rpc
          initialDelaySeconds: 10
          periodSeconds: 10
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.app }}dir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.storage_class }}
      resources:
        requests:
          storage: {{ .Values.node.storage_size }}
